import { useQuery } from 'react-query';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';

//components
import Post from '@epicapp/components/Home/Stream/Post';
import Button from '@epicapp/components/Button/Button';

//services
import { getAuthorDetails } from '@epicapp/services/author';
import { getItem } from '@epicapp/services/inbox';
import { getLiked } from '@epicapp/services/like';

export default function PostPage({ postId, isLogged }) {
  const auth = useQuery(['author'], () => getAuthorDetails(null), {
    staleTime: Infinity,
    enabled: isLogged,
  });

  const post = useQuery(['post', postId], () => getItem(postId), {
    staleTime: Infinity,
  });

  const liked = useQuery(
    ['liked', auth.data?.data?.id],
    () => getLiked(auth.data?.data?.id),
    {
      enabled: !!auth.data?.data?.id,
      staleTime: 10000,
    },
  );

  if (post.isLoading || auth.isLoading || liked.isLoading) {
    return (
      <div className="flex h-screen items-center justify-center py-4 text-9xl text-primary">
        <Head>
          <title>Epic App: Loading</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/logo.svg" />
        </Head>
        <i className="fa-solid fa-spinner-third animate-spin bg-transparent text-2xl text-primary" />
      </div>
    );
  }

  if (post.isError)
    return (
      <main className="container flex h-screen items-center justify-center">
        <Head>
          <title>Epic App: Post Not Found</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/clone-solid.svg" />
        </Head>
        <div className="flex flex-col items-center gap-4">
          <h1 className="text-center text-8xl font-bold text-text">404</h1>
          <p className="text-sm text-textAlt">
            Post not found, or its a post you dont have permission to see :(
          </p>
          <Link
            href="/"
            className="mt-2 w-max rounded-xl bg-layer px-4 py-2 text-textAlt transition-all duration-150 hover:scale-105 hover:bg-primary hover:text-black"
          >
            Home
          </Link>
        </div>
      </main>
    );

  return (
    <main className="container flex flex-col gap-8 py-8">
      <Head>
        <title>{`Epic App: ${post.data.data.title}`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/clone-solid.svg" />
      </Head>
      <div className="flex items-center justify-between">
        <Link href="/">
          <i className="fa-solid fa-arrow-left text-2xl text-primary" />
        </Link>
        <div className="flex items-center justify-end">
          {auth?.data?.data ? (
            <div className="relative flex items-center gap-4 rounded-xl bg-surface px-4 py-2 text-text">
              <Image
                className="overflow-hidden rounded-full object-cover"
                src="profile image"
                alt="profile image"
                loader={() => auth?.data?.data?.profileImage}
                width={30}
                height={30}
                priority={true}
              />
              <span className="font-normal">
                {auth?.data?.data?.displayName}
              </span>
            </div>
          ) : null}
        </div>
      </div>
      <Post
        post={post.data?.data}
        author={auth.data?.data}
        liked={liked.data?.data?.items.map((like) => like.object)}
      />
    </main>
  );
}

export async function getServerSideProps(context) {
  if (!context.query.postId) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
    };
  }
  return {
    props: {
      postId: context.query.postId,
      isLogged: context.req.headers.cookie?.includes('access='),
    },
  };
}
